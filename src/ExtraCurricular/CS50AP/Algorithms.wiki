= Contents =
  - [[#What is an Algorithm|What is an Algorithm]]
  - [[#Expressing Algorithms|Expressing Algorithms]]
  - [[#Verifying Algorithms|Verifying Algorithms]]
    - [[#Verifying Algorithms#Empirical Analysis|Empirical Analysis]]
    - [[#Verifying Algorithms#Formal Reasoning|Formal Reasoning]]
  - [[#Measuring Efficiency|Measuring Efficiency]]
    - [[#Measuring Efficiency#Counting Operations|Counting Operations]]
    - [[#Measuring Efficiency#Empirical Measurements|Empirical Measurements]]
    - [[#Measuring Efficiency#Improving Efficiency|Improving Efficiency]]

= What is an Algorithm =
Algorithm:: Step by step process to solve a problem. *Has 3 steps*

1. *Sequencing* --> Stuff that has to be done in *order*
2. *Selection* --> If-statements
3. *Iterations* --> Loops

= Expressing Algorithms =
- Flow charts:
    - Rectangles --> *Sequencing*
    - Diamond --> *Selection*
- Pseudocode
- Programming Language

= Verifying Algorithms =
Important aspect --> *Correctness*

== Empirical Analysis ==
- Based on actual *experimentation*
- Must be in *actual code*

However the only way to prove is by:
*Formal Reasoning*

== Formal Reasoning ==
One form of reasoning is _"Proof by Induction"_

Proof by Induction:: Don't prove *everything* is true. Just proof enough to be *sure*

{{{
PROCEDURE calcFactorial(n) {
    factorial ← 1
    i ← 1
    REPEAT UNTIL (i > n) {
        factorial ← factorial * i
        i ← i + 1
    }
    RETURN factorial
}
}}}

- Algorithm works for *single int*
- Prove that _"loop invariant is true"_:
    - *A variable that should always be true*
    - Factorial == n!
    - i == n + 1

To prove the algorithm is *true for any positive number*
1. Base Case: *Algorithm holds for very first number*
2. Induction Step: Algorithm works for *number and number + 1*


----
- It's good for *algorithm with numbers*

----
= Measuring Efficiency =
Good algorithm is:
- Correct
- Efficient

== Counting Operations ==
For example a *linear search* algorithm

{{{
PROCEDURE searchList(numbers, targetNumber) {
  index ← 1
  REPEAT UNTIL (index > LENGTH(numbers)) {
    IF (numbers[index] = targetNumber) {
      RETURN index
    }
    index ← index + 1
  }
  RETURN -1
}

}}}

It would take *4* procedures to find the index of 3 in [3,4,7]

Best Case:: Number in *0th* position
Average Case:: Number in *middle* position
Worst Case:: Number in the *last* position

The efficiency can be described as:
1 --> *Variable init*
2 --> N/2 loop repitions
3 --> 3 operations per loop

The equation is *1+3(n/2)*

{{local:./Algorithm-Linear.png}}
----
However the amount procedures does *not* equates to the *amount of time*.

== Empirical Measurements ==
Measure time --> *Programming Language*

{{{
function searchList(numbers, targetNumber) {
    for (var index = 0; index < numbers.length; index++) {
        if (numbers[index] === targetNumber) {
            return index;
        }
    }
    return -1;
}
}}}

This also results in a linear graph:

== Improving Efficiency ==
Binary Search:: A faster search algorithm for *sorted lists*. Basically compares middle index to see if it is lesser or more.

{{{
PROCEDURE searchList(numbers, targetNumber) {
  minIndex ← 1
  maxIndex ← LENGTH(numbers)
  REPEAT UNTIL (minIndex > maxIndex) {
    middleIndex ← FLOOR((minIndex+maxIndex)/2)
    IF (targetNumber = numbers[middleIndex]) {
      RETURN middleIndex
    } ELSE {
       IF (targetNumber > numbers[middleIndex]) {
         minIndex ← middleIndex + 1
       } ELSE {
         maxIndex ← middleIndex - 1
       }
     }
  }
  RETURN -1
}


searchList([3, 37, 45, 57, 93, 120], 45)
}}}


Worst Case:: No number --> *Only 3 full loops*

The algorithm has *increasingly less numbers*. This means it is *not* linear.

{{local:./Algorithm-Binary.png}}

This is called *Logarithmic*
